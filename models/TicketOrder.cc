/**
 *
 *  TicketOrder.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "TicketOrder.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::rail_ticket;

const std::string TicketOrder::Cols::_id = "id";
const std::string TicketOrder::Cols::_username = "username";
const std::string TicketOrder::Cols::_trip = "trip";
const std::string TicketOrder::Cols::_seatType = "seatType";
const std::string TicketOrder::Cols::_amount = "amount";
const std::string TicketOrder::Cols::_start = "start";
const std::string TicketOrder::Cols::_end = "end";
const std::string TicketOrder::Cols::_carriage = "carriage";
const std::string TicketOrder::Cols::_seatPosition = "seatPosition";
const std::string TicketOrder::primaryKeyName = "id";
const bool TicketOrder::hasPrimaryKey = true;
const std::string TicketOrder::tableName = "ticket_order";

const std::vector<typename TicketOrder::MetaData> TicketOrder::metaData_={
{"id","int32_t","int",4,1,1,1},
{"username","std::string","varchar(255)",255,0,0,1},
{"trip","std::string","varchar(255)",255,0,0,1},
{"seatType","int8_t","tinyint",1,0,0,1},
{"amount","std::string","decimal(10,2)",0,0,0,1},
{"start","std::string","varchar(255)",255,0,0,1},
{"end","std::string","varchar(255)",255,0,0,1},
{"carriage","int8_t","tinyint",1,0,0,1},
{"seatPosition","std::string","char(1)",0,0,0,1}
};
const std::string &TicketOrder::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
TicketOrder::TicketOrder(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["username"].isNull())
        {
            username_=std::make_shared<std::string>(r["username"].as<std::string>());
        }
        if(!r["trip"].isNull())
        {
            trip_=std::make_shared<std::string>(r["trip"].as<std::string>());
        }
        if(!r["seatType"].isNull())
        {
            seattype_=std::make_shared<int8_t>(r["seatType"].as<int8_t>());
        }
        if(!r["amount"].isNull())
        {
            amount_=std::make_shared<std::string>(r["amount"].as<std::string>());
        }
        if(!r["start"].isNull())
        {
            start_=std::make_shared<std::string>(r["start"].as<std::string>());
        }
        if(!r["end"].isNull())
        {
            end_=std::make_shared<std::string>(r["end"].as<std::string>());
        }
        if(!r["carriage"].isNull())
        {
            carriage_=std::make_shared<int8_t>(r["carriage"].as<int8_t>());
        }
        if(!r["seatPosition"].isNull())
        {
            seatposition_=std::make_shared<std::string>(r["seatPosition"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 9 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            username_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            trip_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            seattype_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            amount_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            start_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            end_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            carriage_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            seatposition_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

TicketOrder::TicketOrder(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            trip_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            seattype_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            amount_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            start_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            end_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            carriage_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            seatposition_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
}

TicketOrder::TicketOrder(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("username"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["username"].isNull())
        {
            username_=std::make_shared<std::string>(pJson["username"].asString());
        }
    }
    if(pJson.isMember("trip"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["trip"].isNull())
        {
            trip_=std::make_shared<std::string>(pJson["trip"].asString());
        }
    }
    if(pJson.isMember("seatType"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["seatType"].isNull())
        {
            seattype_=std::make_shared<int8_t>((int8_t)pJson["seatType"].asInt64());
        }
    }
    if(pJson.isMember("amount"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["amount"].isNull())
        {
            amount_=std::make_shared<std::string>(pJson["amount"].asString());
        }
    }
    if(pJson.isMember("start"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["start"].isNull())
        {
            start_=std::make_shared<std::string>(pJson["start"].asString());
        }
    }
    if(pJson.isMember("end"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["end"].isNull())
        {
            end_=std::make_shared<std::string>(pJson["end"].asString());
        }
    }
    if(pJson.isMember("carriage"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["carriage"].isNull())
        {
            carriage_=std::make_shared<int8_t>((int8_t)pJson["carriage"].asInt64());
        }
    }
    if(pJson.isMember("seatPosition"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["seatPosition"].isNull())
        {
            seatposition_=std::make_shared<std::string>(pJson["seatPosition"].asString());
        }
    }
}

void TicketOrder::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            trip_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            seattype_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            amount_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            start_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            end_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            carriage_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            seatposition_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
}

void TicketOrder::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("username"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["username"].isNull())
        {
            username_=std::make_shared<std::string>(pJson["username"].asString());
        }
    }
    if(pJson.isMember("trip"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["trip"].isNull())
        {
            trip_=std::make_shared<std::string>(pJson["trip"].asString());
        }
    }
    if(pJson.isMember("seatType"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["seatType"].isNull())
        {
            seattype_=std::make_shared<int8_t>((int8_t)pJson["seatType"].asInt64());
        }
    }
    if(pJson.isMember("amount"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["amount"].isNull())
        {
            amount_=std::make_shared<std::string>(pJson["amount"].asString());
        }
    }
    if(pJson.isMember("start"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["start"].isNull())
        {
            start_=std::make_shared<std::string>(pJson["start"].asString());
        }
    }
    if(pJson.isMember("end"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["end"].isNull())
        {
            end_=std::make_shared<std::string>(pJson["end"].asString());
        }
    }
    if(pJson.isMember("carriage"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["carriage"].isNull())
        {
            carriage_=std::make_shared<int8_t>((int8_t)pJson["carriage"].asInt64());
        }
    }
    if(pJson.isMember("seatPosition"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["seatPosition"].isNull())
        {
            seatposition_=std::make_shared<std::string>(pJson["seatPosition"].asString());
        }
    }
}

const int32_t &TicketOrder::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TicketOrder::getId() const noexcept
{
    return id_;
}
void TicketOrder::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename TicketOrder::PrimaryKeyType & TicketOrder::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &TicketOrder::getValueOfUsername() const noexcept
{
    const static std::string defaultValue = std::string();
    if(username_)
        return *username_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TicketOrder::getUsername() const noexcept
{
    return username_;
}
void TicketOrder::setUsername(const std::string &pUsername) noexcept
{
    username_ = std::make_shared<std::string>(pUsername);
    dirtyFlag_[1] = true;
}
void TicketOrder::setUsername(std::string &&pUsername) noexcept
{
    username_ = std::make_shared<std::string>(std::move(pUsername));
    dirtyFlag_[1] = true;
}

const std::string &TicketOrder::getValueOfTrip() const noexcept
{
    const static std::string defaultValue = std::string();
    if(trip_)
        return *trip_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TicketOrder::getTrip() const noexcept
{
    return trip_;
}
void TicketOrder::setTrip(const std::string &pTrip) noexcept
{
    trip_ = std::make_shared<std::string>(pTrip);
    dirtyFlag_[2] = true;
}
void TicketOrder::setTrip(std::string &&pTrip) noexcept
{
    trip_ = std::make_shared<std::string>(std::move(pTrip));
    dirtyFlag_[2] = true;
}

const int8_t &TicketOrder::getValueOfSeattype() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(seattype_)
        return *seattype_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &TicketOrder::getSeattype() const noexcept
{
    return seattype_;
}
void TicketOrder::setSeattype(const int8_t &pSeattype) noexcept
{
    seattype_ = std::make_shared<int8_t>(pSeattype);
    dirtyFlag_[3] = true;
}

const std::string &TicketOrder::getValueOfAmount() const noexcept
{
    const static std::string defaultValue = std::string();
    if(amount_)
        return *amount_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TicketOrder::getAmount() const noexcept
{
    return amount_;
}
void TicketOrder::setAmount(const std::string &pAmount) noexcept
{
    amount_ = std::make_shared<std::string>(pAmount);
    dirtyFlag_[4] = true;
}
void TicketOrder::setAmount(std::string &&pAmount) noexcept
{
    amount_ = std::make_shared<std::string>(std::move(pAmount));
    dirtyFlag_[4] = true;
}

const std::string &TicketOrder::getValueOfStart() const noexcept
{
    const static std::string defaultValue = std::string();
    if(start_)
        return *start_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TicketOrder::getStart() const noexcept
{
    return start_;
}
void TicketOrder::setStart(const std::string &pStart) noexcept
{
    start_ = std::make_shared<std::string>(pStart);
    dirtyFlag_[5] = true;
}
void TicketOrder::setStart(std::string &&pStart) noexcept
{
    start_ = std::make_shared<std::string>(std::move(pStart));
    dirtyFlag_[5] = true;
}

const std::string &TicketOrder::getValueOfEnd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(end_)
        return *end_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TicketOrder::getEnd() const noexcept
{
    return end_;
}
void TicketOrder::setEnd(const std::string &pEnd) noexcept
{
    end_ = std::make_shared<std::string>(pEnd);
    dirtyFlag_[6] = true;
}
void TicketOrder::setEnd(std::string &&pEnd) noexcept
{
    end_ = std::make_shared<std::string>(std::move(pEnd));
    dirtyFlag_[6] = true;
}

const int8_t &TicketOrder::getValueOfCarriage() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(carriage_)
        return *carriage_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &TicketOrder::getCarriage() const noexcept
{
    return carriage_;
}
void TicketOrder::setCarriage(const int8_t &pCarriage) noexcept
{
    carriage_ = std::make_shared<int8_t>(pCarriage);
    dirtyFlag_[7] = true;
}

const std::string &TicketOrder::getValueOfSeatposition() const noexcept
{
    const static std::string defaultValue = std::string();
    if(seatposition_)
        return *seatposition_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TicketOrder::getSeatposition() const noexcept
{
    return seatposition_;
}
void TicketOrder::setSeatposition(const std::string &pSeatposition) noexcept
{
    seatposition_ = std::make_shared<std::string>(pSeatposition);
    dirtyFlag_[8] = true;
}
void TicketOrder::setSeatposition(std::string &&pSeatposition) noexcept
{
    seatposition_ = std::make_shared<std::string>(std::move(pSeatposition));
    dirtyFlag_[8] = true;
}

void TicketOrder::updateId(const uint64_t id)
{
    id_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &TicketOrder::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "username",
        "trip",
        "seatType",
        "amount",
        "start",
        "end",
        "carriage",
        "seatPosition"
    };
    return inCols;
}

void TicketOrder::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUsername())
        {
            binder << getValueOfUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTrip())
        {
            binder << getValueOfTrip();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSeattype())
        {
            binder << getValueOfSeattype();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getAmount())
        {
            binder << getValueOfAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getStart())
        {
            binder << getValueOfStart();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getEnd())
        {
            binder << getValueOfEnd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCarriage())
        {
            binder << getValueOfCarriage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getSeatposition())
        {
            binder << getValueOfSeatposition();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> TicketOrder::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    return ret;
}

void TicketOrder::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUsername())
        {
            binder << getValueOfUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTrip())
        {
            binder << getValueOfTrip();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSeattype())
        {
            binder << getValueOfSeattype();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getAmount())
        {
            binder << getValueOfAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getStart())
        {
            binder << getValueOfStart();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getEnd())
        {
            binder << getValueOfEnd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCarriage())
        {
            binder << getValueOfCarriage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getSeatposition())
        {
            binder << getValueOfSeatposition();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value TicketOrder::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUsername())
    {
        ret["username"]=getValueOfUsername();
    }
    else
    {
        ret["username"]=Json::Value();
    }
    if(getTrip())
    {
        ret["trip"]=getValueOfTrip();
    }
    else
    {
        ret["trip"]=Json::Value();
    }
    if(getSeattype())
    {
        ret["seatType"]=getValueOfSeattype();
    }
    else
    {
        ret["seatType"]=Json::Value();
    }
    if(getAmount())
    {
        ret["amount"]=getValueOfAmount();
    }
    else
    {
        ret["amount"]=Json::Value();
    }
    if(getStart())
    {
        ret["start"]=getValueOfStart();
    }
    else
    {
        ret["start"]=Json::Value();
    }
    if(getEnd())
    {
        ret["end"]=getValueOfEnd();
    }
    else
    {
        ret["end"]=Json::Value();
    }
    if(getCarriage())
    {
        ret["carriage"]=getValueOfCarriage();
    }
    else
    {
        ret["carriage"]=Json::Value();
    }
    if(getSeatposition())
    {
        ret["seatPosition"]=getValueOfSeatposition();
    }
    else
    {
        ret["seatPosition"]=Json::Value();
    }
    return ret;
}

Json::Value TicketOrder::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 9)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getUsername())
            {
                ret[pMasqueradingVector[1]]=getValueOfUsername();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getTrip())
            {
                ret[pMasqueradingVector[2]]=getValueOfTrip();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getSeattype())
            {
                ret[pMasqueradingVector[3]]=getValueOfSeattype();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getAmount())
            {
                ret[pMasqueradingVector[4]]=getValueOfAmount();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getStart())
            {
                ret[pMasqueradingVector[5]]=getValueOfStart();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getEnd())
            {
                ret[pMasqueradingVector[6]]=getValueOfEnd();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getCarriage())
            {
                ret[pMasqueradingVector[7]]=getValueOfCarriage();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getSeatposition())
            {
                ret[pMasqueradingVector[8]]=getValueOfSeatposition();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUsername())
    {
        ret["username"]=getValueOfUsername();
    }
    else
    {
        ret["username"]=Json::Value();
    }
    if(getTrip())
    {
        ret["trip"]=getValueOfTrip();
    }
    else
    {
        ret["trip"]=Json::Value();
    }
    if(getSeattype())
    {
        ret["seatType"]=getValueOfSeattype();
    }
    else
    {
        ret["seatType"]=Json::Value();
    }
    if(getAmount())
    {
        ret["amount"]=getValueOfAmount();
    }
    else
    {
        ret["amount"]=Json::Value();
    }
    if(getStart())
    {
        ret["start"]=getValueOfStart();
    }
    else
    {
        ret["start"]=Json::Value();
    }
    if(getEnd())
    {
        ret["end"]=getValueOfEnd();
    }
    else
    {
        ret["end"]=Json::Value();
    }
    if(getCarriage())
    {
        ret["carriage"]=getValueOfCarriage();
    }
    else
    {
        ret["carriage"]=Json::Value();
    }
    if(getSeatposition())
    {
        ret["seatPosition"]=getValueOfSeatposition();
    }
    else
    {
        ret["seatPosition"]=Json::Value();
    }
    return ret;
}

bool TicketOrder::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("username"))
    {
        if(!validJsonOfField(1, "username", pJson["username"], err, true))
            return false;
    }
    else
    {
        err="The username column cannot be null";
        return false;
    }
    if(pJson.isMember("trip"))
    {
        if(!validJsonOfField(2, "trip", pJson["trip"], err, true))
            return false;
    }
    else
    {
        err="The trip column cannot be null";
        return false;
    }
    if(pJson.isMember("seatType"))
    {
        if(!validJsonOfField(3, "seatType", pJson["seatType"], err, true))
            return false;
    }
    else
    {
        err="The seatType column cannot be null";
        return false;
    }
    if(pJson.isMember("amount"))
    {
        if(!validJsonOfField(4, "amount", pJson["amount"], err, true))
            return false;
    }
    else
    {
        err="The amount column cannot be null";
        return false;
    }
    if(pJson.isMember("start"))
    {
        if(!validJsonOfField(5, "start", pJson["start"], err, true))
            return false;
    }
    else
    {
        err="The start column cannot be null";
        return false;
    }
    if(pJson.isMember("end"))
    {
        if(!validJsonOfField(6, "end", pJson["end"], err, true))
            return false;
    }
    else
    {
        err="The end column cannot be null";
        return false;
    }
    if(pJson.isMember("carriage"))
    {
        if(!validJsonOfField(7, "carriage", pJson["carriage"], err, true))
            return false;
    }
    else
    {
        err="The carriage column cannot be null";
        return false;
    }
    if(pJson.isMember("seatPosition"))
    {
        if(!validJsonOfField(8, "seatPosition", pJson["seatPosition"], err, true))
            return false;
    }
    else
    {
        err="The seatPosition column cannot be null";
        return false;
    }
    return true;
}
bool TicketOrder::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[8] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TicketOrder::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("username"))
    {
        if(!validJsonOfField(1, "username", pJson["username"], err, false))
            return false;
    }
    if(pJson.isMember("trip"))
    {
        if(!validJsonOfField(2, "trip", pJson["trip"], err, false))
            return false;
    }
    if(pJson.isMember("seatType"))
    {
        if(!validJsonOfField(3, "seatType", pJson["seatType"], err, false))
            return false;
    }
    if(pJson.isMember("amount"))
    {
        if(!validJsonOfField(4, "amount", pJson["amount"], err, false))
            return false;
    }
    if(pJson.isMember("start"))
    {
        if(!validJsonOfField(5, "start", pJson["start"], err, false))
            return false;
    }
    if(pJson.isMember("end"))
    {
        if(!validJsonOfField(6, "end", pJson["end"], err, false))
            return false;
    }
    if(pJson.isMember("carriage"))
    {
        if(!validJsonOfField(7, "carriage", pJson["carriage"], err, false))
            return false;
    }
    if(pJson.isMember("seatPosition"))
    {
        if(!validJsonOfField(8, "seatPosition", pJson["seatPosition"], err, false))
            return false;
    }
    return true;
}
bool TicketOrder::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TicketOrder::validJsonOfField(size_t index,
                                   const std::string &fieldName,
                                   const Json::Value &pJson,
                                   std::string &err,
                                   bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
