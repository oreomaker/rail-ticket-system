/**
 *
 *  Line.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Line.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::rail_ticket;

const std::string Line::Cols::_trip = "trip";
const std::string Line::Cols::_station = "station";
const std::string Line::Cols::_position = "position";
const std::string Line::Cols::_arrive_time = "arrive_time";
const std::string Line::Cols::_leaving_time = "leaving_time";
const std::vector<std::string> Line::primaryKeyName = {"trip","station"};
const bool Line::hasPrimaryKey = true;
const std::string Line::tableName = "line";

const std::vector<typename Line::MetaData> Line::metaData_={
{"trip","std::string","varchar(255)",255,0,1,1},
{"station","std::string","varchar(255)",255,0,1,1},
{"position","int8_t","tinyint",1,0,0,1},
{"arrive_time","std::string","time",0,0,0,0},
{"leaving_time","std::string","time",0,0,0,0}
};
const std::string &Line::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Line::Line(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["trip"].isNull())
        {
            trip_=std::make_shared<std::string>(r["trip"].as<std::string>());
        }
        if(!r["station"].isNull())
        {
            station_=std::make_shared<std::string>(r["station"].as<std::string>());
        }
        if(!r["position"].isNull())
        {
            position_=std::make_shared<int8_t>(r["position"].as<int8_t>());
        }
        if(!r["arrive_time"].isNull())
        {
            arriveTime_=std::make_shared<std::string>(r["arrive_time"].as<std::string>());
        }
        if(!r["leaving_time"].isNull())
        {
            leavingTime_=std::make_shared<std::string>(r["leaving_time"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 5 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            trip_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            station_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            position_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            arriveTime_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            leavingTime_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Line::Line(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            trip_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            station_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            position_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            arriveTime_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            leavingTime_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
}

Line::Line(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("trip"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["trip"].isNull())
        {
            trip_=std::make_shared<std::string>(pJson["trip"].asString());
        }
    }
    if(pJson.isMember("station"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["station"].isNull())
        {
            station_=std::make_shared<std::string>(pJson["station"].asString());
        }
    }
    if(pJson.isMember("position"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["position"].isNull())
        {
            position_=std::make_shared<int8_t>((int8_t)pJson["position"].asInt64());
        }
    }
    if(pJson.isMember("arrive_time"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["arrive_time"].isNull())
        {
            arriveTime_=std::make_shared<std::string>(pJson["arrive_time"].asString());
        }
    }
    if(pJson.isMember("leaving_time"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["leaving_time"].isNull())
        {
            leavingTime_=std::make_shared<std::string>(pJson["leaving_time"].asString());
        }
    }
}

void Line::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            trip_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            station_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            position_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            arriveTime_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            leavingTime_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
}

void Line::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("trip"))
    {
        if(!pJson["trip"].isNull())
        {
            trip_=std::make_shared<std::string>(pJson["trip"].asString());
        }
    }
    if(pJson.isMember("station"))
    {
        if(!pJson["station"].isNull())
        {
            station_=std::make_shared<std::string>(pJson["station"].asString());
        }
    }
    if(pJson.isMember("position"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["position"].isNull())
        {
            position_=std::make_shared<int8_t>((int8_t)pJson["position"].asInt64());
        }
    }
    if(pJson.isMember("arrive_time"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["arrive_time"].isNull())
        {
            arriveTime_=std::make_shared<std::string>(pJson["arrive_time"].asString());
        }
    }
    if(pJson.isMember("leaving_time"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["leaving_time"].isNull())
        {
            leavingTime_=std::make_shared<std::string>(pJson["leaving_time"].asString());
        }
    }
}

const std::string &Line::getValueOfTrip() const noexcept
{
    const static std::string defaultValue = std::string();
    if(trip_)
        return *trip_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Line::getTrip() const noexcept
{
    return trip_;
}
void Line::setTrip(const std::string &pTrip) noexcept
{
    trip_ = std::make_shared<std::string>(pTrip);
    dirtyFlag_[0] = true;
}
void Line::setTrip(std::string &&pTrip) noexcept
{
    trip_ = std::make_shared<std::string>(std::move(pTrip));
    dirtyFlag_[0] = true;
}

const std::string &Line::getValueOfStation() const noexcept
{
    const static std::string defaultValue = std::string();
    if(station_)
        return *station_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Line::getStation() const noexcept
{
    return station_;
}
void Line::setStation(const std::string &pStation) noexcept
{
    station_ = std::make_shared<std::string>(pStation);
    dirtyFlag_[1] = true;
}
void Line::setStation(std::string &&pStation) noexcept
{
    station_ = std::make_shared<std::string>(std::move(pStation));
    dirtyFlag_[1] = true;
}

const int8_t &Line::getValueOfPosition() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(position_)
        return *position_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Line::getPosition() const noexcept
{
    return position_;
}
void Line::setPosition(const int8_t &pPosition) noexcept
{
    position_ = std::make_shared<int8_t>(pPosition);
    dirtyFlag_[2] = true;
}

const std::string &Line::getValueOfArriveTime() const noexcept
{
    const static std::string defaultValue = std::string();
    if(arriveTime_)
        return *arriveTime_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Line::getArriveTime() const noexcept
{
    return arriveTime_;
}
void Line::setArriveTime(const std::string &pArriveTime) noexcept
{
    arriveTime_ = std::make_shared<std::string>(pArriveTime);
    dirtyFlag_[3] = true;
}
void Line::setArriveTime(std::string &&pArriveTime) noexcept
{
    arriveTime_ = std::make_shared<std::string>(std::move(pArriveTime));
    dirtyFlag_[3] = true;
}
void Line::setArriveTimeToNull() noexcept
{
    arriveTime_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Line::getValueOfLeavingTime() const noexcept
{
    const static std::string defaultValue = std::string();
    if(leavingTime_)
        return *leavingTime_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Line::getLeavingTime() const noexcept
{
    return leavingTime_;
}
void Line::setLeavingTime(const std::string &pLeavingTime) noexcept
{
    leavingTime_ = std::make_shared<std::string>(pLeavingTime);
    dirtyFlag_[4] = true;
}
void Line::setLeavingTime(std::string &&pLeavingTime) noexcept
{
    leavingTime_ = std::make_shared<std::string>(std::move(pLeavingTime));
    dirtyFlag_[4] = true;
}
void Line::setLeavingTimeToNull() noexcept
{
    leavingTime_.reset();
    dirtyFlag_[4] = true;
}

void Line::updateId(const uint64_t id)
{
}
typename Line::PrimaryKeyType Line::getPrimaryKey() const
{
    return std::make_tuple(*trip_,*station_);
}

const std::vector<std::string> &Line::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "trip",
        "station",
        "position",
        "arrive_time",
        "leaving_time"
    };
    return inCols;
}

void Line::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getTrip())
        {
            binder << getValueOfTrip();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getStation())
        {
            binder << getValueOfStation();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPosition())
        {
            binder << getValueOfPosition();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getArriveTime())
        {
            binder << getValueOfArriveTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getLeavingTime())
        {
            binder << getValueOfLeavingTime();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Line::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    return ret;
}

void Line::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getTrip())
        {
            binder << getValueOfTrip();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getStation())
        {
            binder << getValueOfStation();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPosition())
        {
            binder << getValueOfPosition();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getArriveTime())
        {
            binder << getValueOfArriveTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getLeavingTime())
        {
            binder << getValueOfLeavingTime();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Line::toJson() const
{
    Json::Value ret;
    if(getTrip())
    {
        ret["trip"]=getValueOfTrip();
    }
    else
    {
        ret["trip"]=Json::Value();
    }
    if(getStation())
    {
        ret["station"]=getValueOfStation();
    }
    else
    {
        ret["station"]=Json::Value();
    }
    if(getPosition())
    {
        ret["position"]=getValueOfPosition();
    }
    else
    {
        ret["position"]=Json::Value();
    }
    if(getArriveTime())
    {
        ret["arrive_time"]=getValueOfArriveTime();
    }
    else
    {
        ret["arrive_time"]=Json::Value();
    }
    if(getLeavingTime())
    {
        ret["leaving_time"]=getValueOfLeavingTime();
    }
    else
    {
        ret["leaving_time"]=Json::Value();
    }
    return ret;
}

Json::Value Line::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 5)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getTrip())
            {
                ret[pMasqueradingVector[0]]=getValueOfTrip();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getStation())
            {
                ret[pMasqueradingVector[1]]=getValueOfStation();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getPosition())
            {
                ret[pMasqueradingVector[2]]=getValueOfPosition();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getArriveTime())
            {
                ret[pMasqueradingVector[3]]=getValueOfArriveTime();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getLeavingTime())
            {
                ret[pMasqueradingVector[4]]=getValueOfLeavingTime();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getTrip())
    {
        ret["trip"]=getValueOfTrip();
    }
    else
    {
        ret["trip"]=Json::Value();
    }
    if(getStation())
    {
        ret["station"]=getValueOfStation();
    }
    else
    {
        ret["station"]=Json::Value();
    }
    if(getPosition())
    {
        ret["position"]=getValueOfPosition();
    }
    else
    {
        ret["position"]=Json::Value();
    }
    if(getArriveTime())
    {
        ret["arrive_time"]=getValueOfArriveTime();
    }
    else
    {
        ret["arrive_time"]=Json::Value();
    }
    if(getLeavingTime())
    {
        ret["leaving_time"]=getValueOfLeavingTime();
    }
    else
    {
        ret["leaving_time"]=Json::Value();
    }
    return ret;
}

bool Line::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("trip"))
    {
        if(!validJsonOfField(0, "trip", pJson["trip"], err, true))
            return false;
    }
    else
    {
        err="The trip column cannot be null";
        return false;
    }
    if(pJson.isMember("station"))
    {
        if(!validJsonOfField(1, "station", pJson["station"], err, true))
            return false;
    }
    else
    {
        err="The station column cannot be null";
        return false;
    }
    if(pJson.isMember("position"))
    {
        if(!validJsonOfField(2, "position", pJson["position"], err, true))
            return false;
    }
    if(pJson.isMember("arrive_time"))
    {
        if(!validJsonOfField(3, "arrive_time", pJson["arrive_time"], err, true))
            return false;
    }
    if(pJson.isMember("leaving_time"))
    {
        if(!validJsonOfField(4, "leaving_time", pJson["leaving_time"], err, true))
            return false;
    }
    return true;
}
bool Line::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Line::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("trip"))
    {
        if(!validJsonOfField(0, "trip", pJson["trip"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("station"))
    {
        if(!validJsonOfField(1, "station", pJson["station"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("position"))
    {
        if(!validJsonOfField(2, "position", pJson["position"], err, false))
            return false;
    }
    if(pJson.isMember("arrive_time"))
    {
        if(!validJsonOfField(3, "arrive_time", pJson["arrive_time"], err, false))
            return false;
    }
    if(pJson.isMember("leaving_time"))
    {
        if(!validJsonOfField(4, "leaving_time", pJson["leaving_time"], err, false))
            return false;
    }
    return true;
}
bool Line::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Line::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
