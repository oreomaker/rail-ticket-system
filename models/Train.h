/**
 *
 *  Train.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace rail_ticket
{

class Train
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _trip;
        static const std::string _type;
        static const std::string _carriage;
        static const std::string _startStation;
        static const std::string _endStation;
        static const std::string _startTime;
        static const std::string _endTime;
        static const std::string _duration;
        static const std::string _status;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = int32_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Train(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Train(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Train(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Train() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int32_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getId() const noexcept;
    ///Set the value of the column id
    void setId(const int32_t &pId) noexcept;

    /**  For column trip  */
    ///Get the value of the column trip, returns the default value if the column is null
    const std::string &getValueOfTrip() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTrip() const noexcept;
    ///Set the value of the column trip
    void setTrip(const std::string &pTrip) noexcept;
    void setTrip(std::string &&pTrip) noexcept;

    /**  For column type  */
    ///Get the value of the column type, returns the default value if the column is null
    const std::string &getValueOfType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getType() const noexcept;
    ///Set the value of the column type
    void setType(const std::string &pType) noexcept;
    void setType(std::string &&pType) noexcept;

    /**  For column carriage  */
    ///Get the value of the column carriage, returns the default value if the column is null
    const int8_t &getValueOfCarriage() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getCarriage() const noexcept;
    ///Set the value of the column carriage
    void setCarriage(const int8_t &pCarriage) noexcept;

    /**  For column startStation  */
    ///Get the value of the column startStation, returns the default value if the column is null
    const std::string &getValueOfStartstation() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getStartstation() const noexcept;
    ///Set the value of the column startStation
    void setStartstation(const std::string &pStartstation) noexcept;
    void setStartstation(std::string &&pStartstation) noexcept;

    /**  For column endStation  */
    ///Get the value of the column endStation, returns the default value if the column is null
    const std::string &getValueOfEndstation() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEndstation() const noexcept;
    ///Set the value of the column endStation
    void setEndstation(const std::string &pEndstation) noexcept;
    void setEndstation(std::string &&pEndstation) noexcept;

    /**  For column startTime  */
    ///Get the value of the column startTime, returns the default value if the column is null
    const std::string &getValueOfStarttime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getStarttime() const noexcept;
    ///Set the value of the column startTime
    void setStarttime(const std::string &pStarttime) noexcept;
    void setStarttime(std::string &&pStarttime) noexcept;

    /**  For column endTime  */
    ///Get the value of the column endTime, returns the default value if the column is null
    const std::string &getValueOfEndtime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEndtime() const noexcept;
    ///Set the value of the column endTime
    void setEndtime(const std::string &pEndtime) noexcept;
    void setEndtime(std::string &&pEndtime) noexcept;

    /**  For column duration  */
    ///Get the value of the column duration, returns the default value if the column is null
    const std::string &getValueOfDuration() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getDuration() const noexcept;
    ///Set the value of the column duration
    void setDuration(const std::string &pDuration) noexcept;
    void setDuration(std::string &&pDuration) noexcept;

    /**  For column status  */
    ///Get the value of the column status, returns the default value if the column is null
    const int8_t &getValueOfStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getStatus() const noexcept;
    ///Set the value of the column status
    void setStatus(const int8_t &pStatus) noexcept;


    static size_t getColumnNumber() noexcept {  return 10;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Train>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Train>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> id_;
    std::shared_ptr<std::string> trip_;
    std::shared_ptr<std::string> type_;
    std::shared_ptr<int8_t> carriage_;
    std::shared_ptr<std::string> startstation_;
    std::shared_ptr<std::string> endstation_;
    std::shared_ptr<std::string> starttime_;
    std::shared_ptr<std::string> endtime_;
    std::shared_ptr<std::string> duration_;
    std::shared_ptr<int8_t> status_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[10]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "trip,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "type,";
            ++parametersCount;
        }
        sql += "carriage,";
        ++parametersCount;
        if(!dirtyFlag_[3])
        {
            needSelection=true;
        }
        if(dirtyFlag_[4])
        {
            sql += "startStation,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "endStation,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "startTime,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "endTime,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "duration,";
            ++parametersCount;
        }
        sql += "status,";
        ++parametersCount;
        if(!dirtyFlag_[9])
        {
            needSelection=true;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace rail_ticket
} // namespace drogon_model
